List images:

docker image ls [-a]
docker images                   
--no-trunc  -full image id
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Serching for docker images:
docker search 'name'    
docker search --filter is-officiall=true 'name'    #official images
docker search -filter stars=500 'name'             #images with given amount of stars
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Downloading images:
docker pull [image]:][tag]                         #docker pull ubuntu:16.04
--disale-content-trust                             #disable contnt veryfication
-q -quiet
-a -all images of given name                       #docker pull -a ubuntu
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Removing images:
docker image rm [id/name]        #must be off, -f (force)
docker rmi [IMAGE_NAME]          #will remove image

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Tagging images:
docker tag [IMAGE_NAME]:[TAG] [MY_NAME]:[MY_TAG]
docker tag mongo:3.0 myimage:latest

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Creating image from working container
docker commit [CONIATNER_NAME] [IMAGE_NAME]     #will save container state (all changees made in interactive mode) as docker image 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Saving and loading images from/to files (saved state etc)

docker image save -o [FILENAME.tar] [IMAGE_NAME]      #will compress image to tar file - may be moved to another host
docker save [IMAGE_NAME] | gzip -c > [FILE.tar.gz]    #saving to compressed file

docker image load -i [IMAGE_FILE.tar]                 #will load image from given file

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Check how given image was created:

docker history [IMAGE]           #All comands used while building this image
________________________________________________________________________________________________________________________________________________________________________________
Creating images - Dockerfile

Directives (layers):
ARG version=3.6-alpine                          #Build argument, may be used with FROM - must be written on the beginning: FROM python:${version}

FROM python3:3.6-alpine                         #base (first) layer of container taken from https://dockerhub.com
                                                #do not use 'latest' argument in Dockerfiles - versions will change in future

RUN pip install Flask==1.0.2                    #Running process inside container (while building from image). 
RUN apt update && apt install python3-pip -y    #After installation updated apt cache should be deleted: rm -rf /var/lib/apt/lists/* 
RUN /bin/bash -c "command"                      #-c convert argument to string

VOLUME [PATH]                                   #Only right side of volume - host nay not have given catalog

EXPOSE 80/tcp                                   #In this container port 80 will be service port. This will give random host port while creating container with -P (from image)

ENV title="Hello world"                         #Export given environment variable in container
ENV FLASK_APP=/main.py
ENV USERNAME=ubuntu

RUN useradd -ms /bin/bash $USERNAME             #creating non-root user, -m -home directory, -s [SHELL]

USER ${USERNAME}                                #will login to given account after run; will take username from env 

WORKDIR [PATH]                                  #set working directory before running commands

ENTRYPOINT [COMMAND, ARGUMENTS]                 #First process (command) that starts just after building container, not ignore running parameters (CMD ignore)
ENTRYPOINT ["flask", "run", "-h", "0.0.0.0", "-p", "80"]       #Will run: flask run -h 0.0.0.0 -p 80

CMD [ARGUMENTS]                                 #Will run command or add given arguments to container entrypoint (the same as args after image name in run command)
CMD ["-h","0.0.0.0","-p","80"]                  #arguments send to ENTRYPOINT if: ENTRYPOINT ["flask", "run"]

COPY [FILE_FROM_HOST] [PATH_IN_CONTAINER]       #Copying files from host
ADD [URL] [PATH_IN_CONTAINER]                   #Downloading files from internet. Can unzip archives too. 

Image must be build from own folder, because while building image, all files (contex) will be added to image.

docker build .                                  #building image from Dockerfile in working directory
-t [TAG]                                        #tag -name of the builded container
--no-cache=true                                 #always rebuild image layers (cache off)
--build-arg version=3.5                         #Build args may be used while building, if more arguments then always --build-arg 

docker build -t mynewflaskapp --build-arg USER=localadmin . 

RUN - is running command while building
CMD - is running command inside builded container 
ENTRYPOINT - first command that runs after starting container (docker rum = docker create + docker start)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
This construction will build 2 images that interact while building

FROM gcc:4.9 as builder
WORKDIR /myapp
COPY Hello.c .
RUN gcc -o myappindocker Hello.c

FROM ubuntu:latest as 
WORKDIR /myexec
COPY --from=builder /myapp .
CMD ["./myappindocker"]


________________________________________________________________________________________________________________________________________________________________________________
Sending image to Docker Hub:                       #Docker hub - 1 private repo, unlimited public repos. 

docker login                                       #login succeed
docker login --username=[USER]

docker push [USERNAME]/[IMAGE_NAME] 

docker build -t [USERNAME]/[IMAGE_NAME]:[TAG] .    #if 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Downloading image from Docker Hub:
docker pull [USERNAME]/[IMAGE_NAME] 

Private registries: 
https://hub.docker.com/_/registry
https://hub.docker.com/r/sonatype/nexus3