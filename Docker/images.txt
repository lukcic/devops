List images:
docker image ls [-a]
docker images                   
   --no-trunc  -full image id

Downloading images:
docker pull [image]:][tag]
docker pull ubuntu:16.04

Removing images:
docker image rm [id/name]        #must be off, -f (force)
______________________________________________________________________________________________________________________________________________________________________________________
Creating images - Dockerfile

Directives (layers):
ARG version=3.6-alpine                          #Build argument, may be used with FROM - must be written on the beginning: FROM python:${version}

FROM python3:3.6-alpine                         #base (first) layer of container taken from https://dockerhub.com
                                                #do not use 'latest' argument in Dockerfiles - versions will change in future

RUN pip install Flask==1.0.2                    #Running process inside container (while building from image). 
RUN apt update && apt install python3-pip -y    #After installation updated apt cache should be deleted: rm -rf /var/lib/apt/lists/* 
RUN /bin/bash -c "command"                      #-c convert argument to string

VOLUME [PATH]                                   #Only right side of volume - host nay not have given catalog

EXPOSE 80/tcp                                   #In this container port 80 will be service port. This will give random host port while creating container with -P (from image)

ENV title="Hello world"                         #Export given environment variable in container
ENV FLASK_APP=/main.py

USER [USERNAME]                                 #user must present in container system - use RUN useradd before

WORKDIR [PATH]                                  #set working directory before running commands

ENTRYPOINT [COMMAND, ARGUMENTS]                 #First process (command) that starts just after building container
ENTRYPOINT ["flask", "run", "-h", "0.0.0.0", "-p", "80"]       #Will run: flask run -h 0.0.0.0 -p 80

CMD [ARGUMENTS]                                 #Will run command or add given arguments to container entrypoint (the same as args after image name in run command)

COPY [FILE_FROM_HOST] [PATH_IN_CONTAINER]       #Copying files from host
ADD [URL] [PATH_IN_CONTAINER]                   #Downloading files from internet. Can unzip archives too. 

Image must be build from own folder, because while building image, all files (contex) will be added to image.
docker build .                #building image from Dockerfile in working directory
-t [TAG]                      #tag -name of the builded container
--no-cache=true               #always rebuild image layers (cache off)
--build-arg version=3.5       #Build args may be used while building 

Saving images to files:
docker save [IMAGE_NAME] | gzip -c > [FILE.tar.gz]

Creating image from working container:
docker commit [CONTAINER_NAME/ID] [IMAGE_NAME]

Tagging images:
docker tag [IMAGE_NAME]:[TAG] [MY_NAME]:[MY_TAG]
docker tag mongo:3.0 myimage:latest
______________________________________________________________________________________________________________________________________________________________________________________
Check how given image was created:

docker history [IMAGE]           #All comands used while building this image
______________________________________________________________________________________________________________________________________________________________________________________
Docker hub - 1 private repo, unlimited public repos. 

Sending image to Docker Hub:
docker build -t [USERNAME]/[IMAGE_NAME]:[TAG] . 
docker login
docker push [USERNAME]/[IMAGE_NAME] 

Downloading image from Docker Hub:
docker pull [USERNAME]/[IMAGE_NAME] 

Private registries: 
https://hub.docker.com/_/registry
https://hub.docker.com/r/sonatype/nexus3