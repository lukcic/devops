Installation:       # https://www.jenkins.io/download/
-install openjdk:   # https://www.jenkins.io/doc/book/installing/linux/
sudo apt install openjdk-11-jdk
# sudo apt install openjdk-11-jre
java -version

-add keys for repo:
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null

-add keys
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee  /etc/apt/sources.list.d/jenkins.list > /dev/null

-install Jenkins:
sudo apt-get update && sudo apt-get install jenkins -y

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Docker run:
docker run -d --name jenkins -p 6969:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home  --restart=always jenkins/jenkins:lts-jdk11
____________________________________________________________________________________________________________________________________________________________________________________________________________________________

Restarting Jenkins:
http://ipaddress:port/restart

____________________________________________________________________________________________________________________________________________________________________________________________________________________________
AGENTS:
Jenkins agents can be:
A) standalone Linux VMs that can create containers (if docker is installed),
B) docker containers built from "docker:dind" image, that can create containers inside of them. 


A. Creating and connecting agents as Linux VMs:

1. Disable jobs running on controller (local executors):
Manage jenkins - Confogure system:
- "# of executors": 0
- set labels: "controller"
- usage: Only build jobs with matching label

2. Install java on agent
sudo apt install openjdk-11-jre

3. Install docker on agent.

4. Jenkins - Manage Jenkins - Manage Nodes and Clouds - New Node (permanent agent)
- remote root dircetory: /home/ubuntu/jenkins
- labels: "linux"
- usage: only jobs with label
- launch method: launch agents via ssh (add key)
- availability: Keep this agent online as much as possile

Testing:
- create a test job (pipeline)
- pipeline script:

"""
pipeline {
    agent {label "linux"}
    stages {
        stage("Hello") {
            steps {
                sh """docker info"""
            }
        }
    }
}
"""

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

B. Creating and connecting agents as Docker containers:

Creating docker host (worker):
docker run --name jenkins-docker -d --network jenkins --network-alias docker --volume jenkins-data:/var/jenkins_home -p 2376:2376 -p 3000:3000 docker:dind 

Optional:
--env DOCKER_TLS_CERTDIR=/certs 
--volume jenkins-docker-certs:/certs/client
--storage-driver overlay2 (after IMAGE name:tag)

Creating Jenkins host (controller):
docker run --name jenkins-blueocean -d --network jenkins --env DOCKER_HOST=tcp://docker:2376 -p 8080:8080 -p 50000:50000 --volume jenkins-data:/var/jenkins_home --volume "$HOME":/home myjenkins-blueocean:2.332.1-1

Optional:
--env DOCKER_CERT_PATH=/certs/client 
--env DOCKER_TLS_VERIFY=1
--volume jenkins-docker-certs:/certs/client:ro

Image for Jenking controller with Docker-cli:
"""
FROM jenkins/jenkins:2.332.1-jdk11
USER root
RUN apt-get update && apt-get install -y lsb-release
RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \
  https://download.docker.com/linux/debian/gpg
RUN echo "deb [arch=$(dpkg --print-architecture) \
  signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
  https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
RUN apt-get update && apt-get install -y docker-ce-cli
USER jenkins
RUN jenkins-plugin-cli --plugins "blueocean:1.25.3 docker-workflow:1.28"
"""

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 



____________________________________________________________________________________________________________________________________________________________________________________________________________________________

Configuring commit triggers:
1. Push notofications from SCM to Jenkins server 
System configuration - Manage Jenkins

Webhook - url on Jenkins server on that jenkins is listening for push notofication from SCM (Source Code Management system - GitHub, GitLab).
http://localhost:8080/github-webhook

2. Jenkins checks for new commits in configured time intervals.
"Scan Multibranch Pipeline Triggers" on Build configuration:

H/5 * * * *     # every 5minutes

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Project types:
-freestyle              - simple single tasks (eg. run tests)
-pipeline               - whole delivery cycle (test, build, package, deploy)
-multibrach pipeline    - pipeline for multiple branches

Credentials scope:
-global     - accessible anywhere across jenkins (build jobe, pipeline jobs etc)
-system     - only on jenkins server, not visible for jenkins job (for jenkins server administrator)
-project    - accessible only in given project

Discover branches in multiple-branch pipeline:
^dev|master|feature.*$      - java regex, dev or master or feature with any number (^$ - start and end of regex)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Simple Jenkinfsile (declarative pipeline):
Easy to start, predefinied structure, 

def gv              # defining variable to store groovy script
pipeline {          # must be top-level
    agent any       # where to execute, reserve build space on any available build node

    environment {   # definition of user environment variables
        NEW_VERSION = "1.3.0"
        SERVER_CREDENTIALS = credentials('credentialId')        # binding definied in Jenkins credentials to env, needs "Credential Binding" plugin 
    }

    parameters {    # defining parameters for given build, 3 types, used with "when {expression}", in GUI use "Build with parameters"
        string(name: 'VERSION', defaultValue: '', description: 'version to deploy on prod')
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: '')
        booleanParam(name: 'executeDeploy', defaultValue: true, description: '')
    }

    stages {        # here the work happens
        stage('Build') {
            steps {
                sh 'make'
                echo "building version ${NEW_VERSION}"  # using user definied variable, in groovy "" must be used
                script {
                    # using groovy script inside simple Jenkinsfile
                    gv = load. "script.groovy"
                    ''' # inside of file script.groovy
                    def buildApp() {
                        echo 'building the aplication...'
                    }

                    return this
                    '''
                    gv.buildApp()     # using function from loaded script
                }
            }
        }

        stage('Test') {
            when {  # do the stage if expression is true
                expression {
                    BRANCH_NAME == 'dev'    # do stage 'test' steps only on branch called 'dev'
                    BRANCH_NAME == 'dev' || BRANCH_NAME == 'master' # or
                    BRANCH_NAME == 'dev' && CODE_CHANGES = true     # && and, do steps only on branch 'dev' and only if code changes    
                }
            }
            steps {
                sh 'make test'
            }
        }

        stage('Deploy') {
            when {
                expression {
                    params.executeDeploy == true
                }
            }

            steps {
                echo "deploying version ${params.VERSION}"
                sh 'deploy.sh'
                withCredentials([usernamePassword(credentials: 'credentialId', usernameVariable: USER, passwordVariable: PWD)]) {
                    # using Jenkins stored credentials in scope of this stage
                    sh "some script ${USER} ${PWD}"
                }
            }
        }
    }

    post {          # execute some logic after all stages were executed
        always {
            # this will always be executed, whatever build succed or failed
            # used to send email with build status
        }
        success {
            # this will be done if build is green
        }
        failure {
            # this will be done if build is red
        }
    }
}

JENKINS environment variable:
https://localhost:8080/env-vars.html

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Groovy scripted:
High fexibility, harder to start.

stage('build') {
    echo 'Building the application...'
    script {
        def test = 2 + 2 > 3 ? 'cool' : 'not cool'
        echo test
    }
}

node {
    //groovy script
}

____________________________________________________________________________________________________________________________________________________________________________________________________________________________

Monitoring Jenkins using Prometheus & Grafana:

1. Install Prometheus etrics plugin in Jenkins.
2. Chnage settings in Dashbord - Manage Jenkins - Configure system - Prometheus: Collecting metrics period in time etc.
3. Check metrics: http://localhost:8080/prometheus
4. Install Prometheus server and add config:
- job_name: 'jenkins'
    metrics_path: /prometheus/
    static_configs:
    - targets: ['192.168.254.50:6969']
5. Import Grafana dashbord (eg. 9964)