https://learn.hashicorp.com/terraform?utm_source=terraform_io

Infrastructure as a Cloud (IaaC) in Terraform:
-infrastructure can be deployed on multiple cloud providers
-human readable configuration
-state allows to track changes in infrastructure
-configuration can be managed using version control

Terraform plugins to magage different cloud operators are called providers.
Resources are individual units of inftastructure (VMs, provate networks etc.).
Terraform configurations are called modules. Configuration language is declarative - describes desired state of resource. 
Providers calculate dependencies between resources and create or destroy needed.

Scope       - identify the infrastructure for your project
Author      - write the config
Initialize  - installing plugins
Plan        - preview the changes
Apply       - make the planned changes

Terraform keeps state of infrastructure in state file. This file is udes to determine changes to do.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Installation in Ubuntu:
sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install terraform

terraform -install-autocomplete
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Usage:

terraform init          #initialize the project, which downloads a plugin that allows Terraform to interact with Docker.

terraform fmt           #check and correct formatting of terraform file

terraform validate      #check and correct syntax of terraform file

terraform apply         #Provision the NGINX server container with apply. When Terraform asks you to confirm, type yes and press ENTER.
-var "instance_name=myOwnName"  # overriding variable

terraform show          #inspect created resources

terrafrom output        #returns values of output variables saved in cofiguration

terraform destroy       #To stop the container and destroy the resources created in this tutorial, run terraform destroy. When Terraform asks you to confirm, type yes and press ENTER.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
First module:

main.tf:

terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "~> 2.15.0"
    }
  }
}

provider "docker" {}

resource "docker_image" "nginx" {
  name         = "nginx:latest"
  keep_locally = false
}

resource "docker_container" "nginx" {
  image = docker_image.nginx.latest
  name  = "tutorial"
  ports {
    internal = 80
    external = 8000
  }
}


terraform init            
terraform apply         
docker ps               #Run docker ps to view the NGINX container running in Docker via Terraform.
terraform show          
terraform destroy       

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Terrafrom registry:
https://registry.terraform.io   # Here are definitions of terraform providers

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Terraform state:
terraform.tfstate - in this file terraform stores state of created infrastructure. 
Has sensitive data, so should be managed as a secret.

terraform state         # advanced state management
terraform state list    # list resources handle by state file

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

https://learn.hashicorp.com/collections/terraform/cli