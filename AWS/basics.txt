Unix & Linux p.325

Documentation:
https://docs.aws.amazon.com

AWS.amazon.com/calculator

Free tier - warstwa bezplatna

AWS CLI!!!
BOTO3 - API do AWSa

______________________________________________________________________________________________________________

IAM (Identity and Access Management)            #https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html
-management of users and their permissions
-IAM users that not separated account but users with own creditentials inside root account
-AIM groups - set permission to groups, users can be in many groups, users inhertes permissons from group and can have own permissions

IAM Policies - created to give permissions for users, groups and roles:
-Managed (independent, can be attached to multiple users), AWS managed and customer managed
-Inline (created by you, set (embeded) to single user, group or role)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Amazon Resource Names (ARN) - unique name of resource (eg. VM) given after creation

arn:[PARTITION]:[SERVICE]:[REGION]:[ACCOUNT_ID]:[RESOURCE_TYPE]/[RESOURCE]
arn:aws:iam:123456789012:user/Bob       # iam use global region (aws-us-gov)


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

IAM JSON Policy elements:
https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html

{
    "Version" : "2012-10-17"    # older (default) version "2008-10-17"
    "Statement" : [             # required, main element for policy 
        {
            "Principal" : {"AWS":["arn:aws:iam:12345678912:root"]}
            "Effect" : "Allow",                             # allow or deny
            "Action" : "["s3":"PutObject"]",                # what wil be allow or deny, "NotAction" - matches everythong without given value
            "Resource" : "arn:aws:s3:::examplebucket/*",    # what the "Statement" covers (ARN), "NotResource" - matches everyting excluding given value
            
            "Sid" : "AllowFullAccessToAllAWSResorces",                      # Statement id (Optional), must be unique in policy
            "Condition" : {"IpAddress":{"aws:sourceIp":"192.0.2.0/24"}}     # Optional, specify when policy is affect - condition (boolean) must be fully (equal, less then etc)
        }
    ]
}

Policies can be resource-based (eg. particular EC2 vm) or identity-based (eg. user).

Policy logic:
-is is only one deny - answer deny
-if is only one allow - answer allow
-if there is no allow - answer deny

AWS Policy generator:
https://awspolicygen.s3.amazonaws.com/policygen.html

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

IAM Role - similar to user (has permission policy) but not specified person. For everyone who needs it (temporary creditentials). 
Trust policy - who can assume the role (principal element). May it be service (EC2) or user or account. Action: "sts:AssumeRole"

"Principal" : {"AWS":["arn:aws:iam:12345678912:root"]}      #inside statement

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

.aws/credentials file (used in Ansible, awscli):
[default]
AWS_ACCESS_KEY_ID=[VALUE]
AWS_SECRET_ACESS_KEY=[VALUE]

______________________________________________________________________________________________________________

VPC - virtual private cloud

Limitations:
-5 VPCs per account
-4 secondary IP ranges
-200 subnets
-5 elastic IP addresses
-10 hardware VPN connections

Virtual, private network that uses the same concepts as on premise networking.
Allows of control of network config (IP subnets, routing tables, access lists). 
Ability to isolate and expose resources inside VPC. 
Sevral layers of controls. Services inherit security from VPC. 

Services are deployed in VPC.
Multiple VPCs per account. 
VPCs lives within (w ramach) a region and has own addressing (eg. 10.0.0./16)

-Availability zones - on-premise datacenters within one region.
-Subnets - divides VPC. Public (connected to IGW) and private (connected to NAT). Used for connecting Availibility Zones. Must be a aubset of the core VPC subnet.
-Route tables - used to control traffic out of subnets. 
-Internet Gateway (IGW) - allows access to internet from VPC.
-Virtual Private Gateway (VGW) - VPN gateway
-NAT Gateway - allows private subnet resources access to internet
-Security group - firewall attached to resource (EC2 VM), statefull (allow outbound rules if inbound are allowed). By default everything is denied (cannot deny traffic from particular instance).
-Network ACcess List (NACL) - firewall for subnets, reads from lower to higher number (stateless - both: inbound and outbound rules must be specified). Rules can be allow or deny. 
-Peering connections - connect 2 VPCs together

#Security group - networking (firewall) for ec2 instance (like os firewall, Network ACL is fos subnet)
______________________________________________________________________________________________________________

Route53 - Amazon DNS system.
-Resolver
-Trafiic Flow
-Latency based routing
-Geo & private DNS
-DNS failover
-Health check
-Domain registration
-ELB integration (Load Balancing)

https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html
https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-private.html
______________________________________________________________________________________________________________

CloudFront - Content Delivery Network (CDN). Low latency and higher transfer using multiple AWS phisical locations.

______________________________________________________________________________________________________________

ELB - Elastic Load Balancing
It is configured from EC2 panel

Appication Load Balancer - HTTP and HTTPs traffic, provides advanced request routing 
Network load balancer - load balance of TCP trafiic with extreme performance, operates on 4th layer (connections) 
Classic Load Balancer - load balance across mltiple EC2 instnaces, operates on request and connection level (4th layer)

______________________________________________________________________________________________________________
Monitoring:
AWS X-Ray is a distributed tracing system. It helps you analyze and debug your distributed applications, such as those built using microservices, or serverless architecture. It provides an end-to-end view of requests as they travel through your application, and shows a map of your application`s underlying components.
Amazon CloudWatch is a monitoring and management service that provides data and actionable insights for AWS, hybrid, and on-premises applications and infrastructure resources. With CloudWatch, you can track resources and application performance, collect and monitor log files, troubleshoot, and set alarm notifications.
AWS Config is a service that enables you to assess, audit, and evaluate the configurations of your AWS resources. AWS Config continuously monitors and records your AWS resource configurations. It enables you to automate the evaluation of recorded configurations against desired configurations. 
AWS CloudTrail is a service that enables governance, compliance, operational auditing, and risk auditing of your AWS account. With CloudTrail, you can log, continuously monitor, and retain account activity related to actions across your AWS infrastructure. CloudTrail provides event history of your AWS account activity, including actions taken through the AWS Management Console, AWS SDKs, command line tools, and other AWS services. This event history simplifies security analysis, resource change tracking, and troubleshooting. In addition, you can use CloudTrail to detect unusual activity in your AWS accounts. These capabilities help simplify operational analysis and troubleshooting.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Storage:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

S3 - Simple Storage Service (object)
S3 bucket miejsce gdzie przechowujemy foldery i pliki (S3 objects). Bucket must be understood as a folder/directory. 
Bucket names must be unique in worldwide range (DNS names). By default every bucket is private.
Used for: web serving, content management, media, backups, data lake.
Stored redundantly across multiple AZs. 

Bucket - główny folder
Podkatalogi - foldery
Obiekty

Pliki przechowujemy w regionie najbliższym nam (klientowi) fizycznie (latency). 
Zazwyczaj wymagany ten sam region co ec2. 

Klasy obiektów, różna cena zależna od czasu dostępu, czasu niedostępności, Ilości replikacji. Klasa pliku /folderu może być zmieniona w każdej chwili. 

Klasa standard - najdroższa.
Inteligent tiering
Standard IA (IA - Infrequent Access)
One zone IA
Glacier

Options
-logging -S3 will log all access attempts. 

Lifecycles - automatyczna migracja obiektu do innej klasy lub jego usunięcie. 
Zasady mogą być stosowane do całego bucket, folderów lub obiektów. Zasadę po utworzeniu trzeba aktywować. 

Versioning - S3 bucket will keep all versions of file if it was modified. Enabled in bucket options, cannot be disabled (only suspended).
Versioning is reffering to file`s URLs.

Transfer acceleration - pay for fastest tranfer of data withinh the bucket.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

EBS - Elastic Block Storage (block)
Local storage (volumes and snapshots). Persistant block volumes. Redundancy in availability zones. 
Can be attached to one EC2 in single AZ. Used for: boot volumes, databases, log processing applications, data warehousing. 
Stored redundantly in a singles AZs. 

Volume types:
IOPS SSD (io1) -  higher i/o
GP SSD (gp2) - general purpose SSD, lower price
Throughput optimized HDD (st1) - frequntly accessed
Cold HDD (sc1) - lowest cost 

SSD - transactional workloads (databases, boot volumes), hihets 
HDD - Throughput intensive workloads (log processing)

Data Lifecycle manager - schedule for snapshots rotation (cleanup)

Elastic volumes - dynamicly increase capacity or performance

Snapshots - backups, save point of time in S3 bucket (always incremental version of previous one). Can be copied across regions. 
Initial snapshot should be saved as AMI (Amazon Machine Image) or stored in different bucket than other incremental snapshots.

Optimizedd instances - EC2 fully use provisioned i/o

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

EFS - Elastic File System (file)
Shared file storage (between many EC2s in different AZs). 
Used for: web serving, content management, enterprise applications, media, home directories, database backups, developer tools, container storage, big data analysis.
Stored redundantly across multiple AZs. 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Glacier - Archieving data
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Storage Gateway

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
DATABASES:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

RDS - Relational Database Service (relational, rows and columns)

1. Amazon Aurora - compatible with MySQL & PostgreSQL (engine choose), much faster than them. 
2. Mariadb
3. PostgresQL
4. Oracle
5. MS SQL
6. MySQL

Must create a subnet group and choose subnet for db and vpc.

DynamoDB - NoSQL (no engine choose) key:value like json
MongoDB
Cassandra

MySQL Workbench
Connection to mySQL over ssh


-----------------------------------------------------------------------------------------------------------------------------------------------------------------
AWS Management Tools:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

CloudWatch - live monitoring service for all AWS resources.
Metrics can be catalog or cached for notofications. CloudWatch can increase EC2 parameters when detects too high load (AutoScaling). 
Payment depends of region.  

Dashbord - graphs like Grafana
Alarms - notifications to SNS

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

CloudTrail - Tracking users activity and API usage.
Compliance auditing
Operational troubleshooting
Security analysis

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

AWS CloudFormation - Like terraform?

Used for coding infrastructure, CloudFormation template language, JSON, YAML. Has reade templates for eg. Wordpress.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Trusted Advisor - Automatic infrasturcture optimization

Scans infrastructure, compares it with AWS best practices (in 5 categories) and provides recommanded actions:
-cost optimization
-performance
-security
-fault tolerance
-servcie limits 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

AWS Config
Configuration changes - records and normalizes that changes

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

EC2 Systems Manager - Manage and operate resources at scale

Create a groups of resources, visualize data, automate operational actions across groups.
-run command
-state manager
-inventory
-maintenance window
-patch manager
-automation




-----------------------------------------------------------------------------------------------------------------------------------------------------------------
AWS Messaging Tools:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------


SNS -Simple Notification service

Publisher - komunikacja 
Subscriber - webserwisy, które informuja o zdarzeniu

Tutaj sie konfiguruje rodzaje powiadomien i odbiorcow.

Topic - label, grupa ktora definiuje nasze endpointy w wiadomosci definiowanej
Subscription - miejsce gdzie ma wyslac wiadomosc (email, telefon)
Publisher - czlowiek ,alar, event ktory generuje lub zbiera to co ma byc wyslane

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

SQS - Simple Queue service

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

SES

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Lambda - wykonywanie naszego kodu (funkcji) na infrastrukturze AWS, płacimy tylko za każdorazowe użycie kodu
Function will start when:
-message came to queue
-new object in bucket
-http request came


Paas - run your code on cloud infrastructure
Google app Engine
Elastic Beanstalk (AWS) -deployin applications written in specific programming language (Java, Python, nodeJS etc.) Upload your code and ElasticBeanstalk do the rest. 



Ec2 pricing
on demand - rozliczanie minutowe

reserved - oplata z gory, deklaracja czasu, duze rabaty

spot? - Auction, we can declare the price that we can pay for compute and if our bid is eniugh we can use VM. Used for analytics etc. Large taska that doesn`t need to be done fast - cheeper is better.
used to jenkins lub teamcity 


AMI - Amazon Machine Images (obrazy)


AWS OpsWorks - like Ansible, use chef??
AWS Cloud9 - cloud IDE (VS Code)
AWS CodeBuild - like Jenkins (AWS CodeBuild is a fully managed build service that automatically compiles source code, runs tests, and produces software packages. )
AWS CodeCommit - like GitHub
AWS CodePipeline - like Jenkins (AWS CodePipeline is a continuous delivery service that enables you to model, visualize, and automate the steps required to release your software. )
AWS CodeDeploy - Deplying automation
Amazon Elastic Container service (Amazon ECS) - like Kubernetes
AWS Cloud Development Kit (AWS CDK)  - programming framework for creating IaaC. AWS CDK is a compiler that compiles your source code into an AWS CloudFormation template. 
