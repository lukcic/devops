https://docs.ansible.com/
https://docs.ansible.com/ansible/latest/modules/modules_by_category.html

Playbooks repository
https://galaxy.ansible.com/

Ansibl - fiction communication device, that can send information faster than light speed. 
It was used in some books for remote steering of many spaceships in the same time.

Ansible - configuration management:
-installation software packages
-making/changing configuration files
-changing permissions
-starting/restarting services
on many servers at once.

Installation:
pip install ansible

ansible --version   #checking version

Server provisioning - running new instances of vms. 
Deployment orchestration - making operatios in dedicated order on many remote servers. 

Ansible by default use ssh client installed on host, python Paramiko module may be used too.

Playbook (scenariusz) - .yml file, script writed in yaml (list of dictionaries) with instructions to do for servers. 
Can be written in JSON format too. It`s agentless and use push method to send instructions.
Ansible is connetcting with given hosts by SSH simultaneously and check the state of given instructions, if its already done, shows 'ok'. 
If they are not done, will do them (idempotention) in described order and change status for 'changed'. Will not start operatation until last one is not done. 
Ansible is using python and simplejson library, so it must be installed on servers.

Playbok - [on server] - Action - Task - Module

ansible-playbook playbook.yml   #running the playbook
--start-at-task [NAME]          #will run playbook at given task (located by name)
--list-tasks                    #show tasks that playbook includes

#!/usr/bin/env ansible-playbook         #shebang to set in playbook file
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Testing connection:
ansible [HOST_ALIAS] -m [MODULE_NAME]       # ansible command is used to run single command (without playbook)
ansible testserver -m ping

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Modules are scripts installed with ansible to do given operations (file/dir creation, copying, installing).

Ansible modules (apt, yum) are made for specific linux distibutions. 
Ansible use roles and variables may be used in playbooks.

ansible-doc [MODULE]    -show help for given module

Modules:
ansible [HOST_ALIAS] -m command -a [ARGS]                   # command module lets using bash command on server
ansible testserver -m command -a uptime
ansible testserver -a uptime                                # command is a default module, you can give only command as argument
ansible testserver -a "ls -l"                               # if command includes white spaces, must be used with ""
ansible testserver -b -a "halt"                             # -b -is used when command need sudo

ansible [HOST_ALIAS] -i [INVENTORY_FILE] -m [MODULE_NAME]   # -i -define inventory file
ansible testserver -i hosts -m ping -vvvv                   # -vvvv gives very veryvery verbose (detailed) info

ansible testserver -b -m apt -a "name=nginx update_cache=yes"       # apt module usecase
ansible testserver -b -m service -a "name=nginx state=restarted"    # service module usecase
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Playbook web-tls.yml:

---                                                                         #document beginning 
- name: Konfiguracja serwera www na platformie Nginx z szyfrowaniem TLS     #name is displayed when playbook is running
  hosts: webservers                                                         #servers group to configure                                         
  become: True                                                              #if True, ansible will do all tasks as root (using sudo)
  vars:                                                                     #vars , eg. {{ cert_file }}  will search for cert_file in vars section and paste it while running 
          key_file: /etc/nginx/ssl/nginx.key                                #in older ansible version $ was used instead {{ }}
          cert_file: /etc/nginx/ssl/nginx.crt
          conf_file: /etc/nginx/sites-available/default
          server_name: localhost
  tasks:                                                                    #things to do (hosts and task element are obligatory), one action with few tasks
    - name: Instalacja Nginx                                                #module arguments should use 'yes' or 'true'
      apt: name=nginx update_cache=yes cache_valid_time=3600                #use apt module to update cache (apt update) and install nxing (apt install nginx)
    - name: Tworzenie katalogów dla certyfikatów SSL
      file: path=/etc/nginx/ssl state=directory                             #file module can change file/dir/link atributes 
    - name: Kopiowanie klucza TLS
      copy: src=files/nginx.key dest={{ key_file }} owner=root mode=600     #copy module will copy file from host to remote server
      notify: Restart Nginx   
    - name: Kopiowanie certyfikatu TLS
      copy: src=files/nginx.crt dest={{ cert_file }} 
      notify: Restart Nginx                                                 #notify: [handler_name] (powiadom), is sended to handler when ansible returns 'changed' in given task
    - name: Kopiowanie pliku konfiguracyjnego Nginx 
      template: src=templates/nginx.conf.j2 dest={{ conf_file }}            #this module creates files from template and copy it to server
      notify: Restart Nginx
    - name: Konfiguracja
      file: dest=/etc/nginx/sites-enabled/default src={{ conf_file }} state=link
      notify: Restart Nginx
    - name: Kopiowanie index.html
      template: src=templates/index.html.j2 dest=/usr/share/nginx/html/index.html mode=0644
  handlers:                                                                 #handlers means procedures - just if statements (conditional instructions)
    - name: Restart Nginx                                                   #like task, but it is runing only when another task send notification to handler
      service: name=nginx state=restarted                                   #service module can manage linux services (start/stop/restart)

In this case ansible will restart nginx (hander Restart Nginx) every time when task that include 'notify' instruction is runned (changed its state).
Handlers are definied only once at the end of playbook.They are mostly used to restart services or servers.
_________________________________________________________________________

Vars {{ }} are used in .j2 and .yml files (.j2 means template written in Jinja2 language).
Normal variables range is limited to given server - value is useable only for this server. 

Vars may be saved in separated file, this files should be addressed in playbook:
'''
vars_files:
- nginx.yml
'''

In case of problems, value of var can be displayed:
'''
- debug: var=variable_name
'''

Saving returned values to var:
'''
- name: Saving whoami value
 command: whoami
 register: login
'''

To register and display value of var use:
'''
- name: Displaying values returned by command module.
  hosts: server1
  tasks:
    - name: Saving id command result.
      command: id -un
      register: login
      ignore_errors: True     #do not sop next operations
    - debug: var=login
'''
rc: 0 -taks succeed, 1- task failed (see stderr)

If variables value is a dictionaty, for reffering to keys and values Ansible use Jinja2:
ansible_eth1['ipv4']['address']
ansible_eth1['ipv4'].address
ansible_eth1.ipv4['address']
ansible_eth1.ipv4.address

Overriding vars:
ansible-playbook example.yml -e 'greeting="Good morning!"'
ansible-playbook exaplme.yml -e @greetvars.yml              #greetvars.yml: greetings: Hello!
assignatoin from the commandline has the highest priority.

Variables that are always available in playbook:
-hostvars                   -dictionary, keys- server names, values- vars names combines with its values (dictionaries). for every server in group, ansible creates copy of group variable
-inventory_hostname         -FQDN of server 
-inventory_hostname_short   -server name without domain
-group_names                -list of all groups that server belongs
-groups                     -dictionary, keys-group names, values-lists of server names that belongs to given group
-ansible_check_mode         -True if playbook is running in check mode (simulation?)
-ansible_play_batch         -list of active (in group) server names
-ansilbe_play_hosts         -list of all active servers (in this playbook)
-ansible_version            -vesrion of ansible (dictionary)

hostvars - is used to configure element with value that will be gather as fact from another server.
For example, to configure (in www aplicatoin) ip address of db server use:
{{ hostvars['db.example.com'].ansible_eth1.ipv4.address }}
this variable will be changed to IP addres of db.example.com after gathering facts.

inventory_hostname -this variable stores name or alias of current server,
to display all variables for current server use:
- debug: var=hostvars[inventory_hostname]

groups- used to get other vars of servers group. To configure load balancer use:
'''
backend web-backend
{% for host in groups.web %}
 server {{ hostvars[host].inventory_hostname }} \
 {{ hostvars[host].ansible_default_ipv4.address }}:80
{% endfor %}
'''
it will be changed for:
backend web-backend
 server georgia.example.com 203.0.113.15:80
 server newhampshire.example.com 203.0.113.25:80
 server newjersey.example.com 203.0.113.38:80

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Facts - vars collected by Ansible, to handle information of server like cpu architecture, os type, IP, memoty etc.
It may be used as normal vars. 

Display server os type:
'''
- name: Display server os type
  hosts: all
  gather_facts: True
  tasks:
    - debug: var=ansible_distribution
 '''

List of fats:
https://github.com/lorin/ansible-quickref/blob/master/facts.rst

Setup module:
ansible testserver -m setup   #will return dictionary 'ansible_facts' that includes detailed dictionaries with testserver facts
-a 'filter=[fact_name]'       #will show details of given fact
ansible testserver -m setup -a 'filter=ansible_eth*'

Many Ansible modules return facts, when they are used, there`s no need to register variables (it is done automatically).

Local facts
May be saved in /etc/ansible/facts.d/filename.fact:
[group]
fact=value

Facts stored in this files can be acessed by ansible_local variable:
{{ ansible_local.filename.group.fact }}
_________________________________________________________________________

p. 89